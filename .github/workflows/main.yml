#Name des Workflows
name: Python Flask-Rest-API Workflow

#wird bei einem Commit auf dem Master-Branch gestartet und kann auch manuell ausgefuehrt werden
on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:


jobs:
  #Job der das Docker-Image baut
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build Docker image
        run: docker build -t my-api-image .

      - name: Run tests with Docker
        run: docker run --rm my-api-image pytest

  #Job der Dateien als Release hochlaedt
  release:
    name: Create Release
    #wird erst nach dem build-Job ausgefuehrt
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Create Release Archive
        run: |
          zip -r Flask-API.zip Dockerfile Pipfile Pipfile.lock README.md app.py  # Alle Dateien hinzu, die im Release enthalten sein sollen
          echo "::set-output name=archive_path::Flask-API.zip"

      - name: Upload Release Archive
        uses: actions/upload-artifact@v2
        with:
          name: Release Archive
          path: ${{ steps.create_release.outputs.archive_path }}
